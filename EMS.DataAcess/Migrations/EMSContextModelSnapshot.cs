// <auto-generated />
using System;
using EMS.DataAcess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EMS.DataAcess.Migrations
{
    [DbContext(typeof(EMSContext))]
    partial class EMSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EMS.Entity.EventAttendanceEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActionDate");

                    b.Property<Guid>("EventDetailsID");

                    b.Property<bool>("ISAttend");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LatestUpdate");

                    b.Property<long>("LatestUpdateUserID");

                    b.Property<Guid>("UserAttendID");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("EventDetailsID");

                    b.HasIndex("UserAttendID");

                    b.ToTable("EventAttendances");
                });

            modelBuilder.Entity("EMS.Entity.EventCategoryEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActionDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LatestUpdate");

                    b.Property<long>("LatestUpdateUserID");

                    b.Property<string>("Name")
                        .HasMaxLength(350);

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.ToTable("EventCategories");
                });

            modelBuilder.Entity("EMS.Entity.EventDetailsEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActionDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<Guid>("EventCategoryID");

                    b.Property<Guid>("EventStatusID");

                    b.Property<Guid>("EventVenueID");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LatestUpdate");

                    b.Property<long>("LatestUpdateUserID");

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<Guid>("OrganizerID");

                    b.Property<DateTime>("StartDate");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("EventCategoryID");

                    b.HasIndex("EventStatusID");

                    b.HasIndex("EventVenueID");

                    b.HasIndex("OrganizerID");

                    b.ToTable("EventDetails");
                });

            modelBuilder.Entity("EMS.Entity.EventStatusEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActionDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LatestUpdate");

                    b.Property<long>("LatestUpdateUserID");

                    b.Property<string>("Name")
                        .HasMaxLength(350);

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.ToTable("EventStatuses");
                });

            modelBuilder.Entity("EMS.Entity.EventVenueEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActionDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LatestUpdate");

                    b.Property<long>("LatestUpdateUserID");

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.ToTable("EventVenues");
                });

            modelBuilder.Entity("EMS.Entity.GenderEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActionDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LatestUpdate");

                    b.Property<long>("LatestUpdateUserID");

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("EMS.Entity.JobEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActionDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LatestUpdate");

                    b.Property<long>("LatestUpdateUserID");

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("EMS.Entity.NationalityEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActionDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LatestUpdate");

                    b.Property<long>("LatestUpdateUserID");

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("EMS.Entity.OrganizerEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActionDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LatestUpdate");

                    b.Property<long>("LatestUpdateUserID");

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.ToTable("Organizers");
                });

            modelBuilder.Entity("EMS.Entity.UniversityEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActionDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LatestUpdate");

                    b.Property<long>("LatestUpdateUserID");

                    b.Property<string>("Name")
                        .HasMaxLength(450);

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("EMS.Entity.UserAdminEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActionDate");

                    b.Property<string>("Email")
                        .HasMaxLength(550);

                    b.Property<string>("FirstName")
                        .HasMaxLength(250);

                    b.Property<string>("FullName")
                        .HasMaxLength(250);

                    b.Property<Guid>("ImgPathID");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("JobID");

                    b.Property<string>("LastName")
                        .HasMaxLength(250);

                    b.Property<DateTime>("LatestUpdate");

                    b.Property<long>("LatestUpdateUserID");

                    b.Property<Guid>("UserID");

                    b.Property<string>("UserJobNumber")
                        .HasMaxLength(250);

                    b.HasKey("ID");

                    b.HasIndex("ImgPathID");

                    b.HasIndex("JobID");

                    b.ToTable("UserAdmins");
                });

            modelBuilder.Entity("EMS.Entity.UserAttendEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActionDate");

                    b.Property<string>("Address")
                        .HasMaxLength(550);

                    b.Property<string>("Email")
                        .HasMaxLength(550);

                    b.Property<string>("FirstName")
                        .HasMaxLength(250);

                    b.Property<string>("FullName")
                        .HasMaxLength(550);

                    b.Property<Guid>("GenderID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsVIP");

                    b.Property<string>("LastName")
                        .HasMaxLength(250);

                    b.Property<DateTime>("LatestUpdate");

                    b.Property<long>("LatestUpdateUserID");

                    b.Property<Guid>("NationalityID");

                    b.Property<string>("Title")
                        .HasMaxLength(300);

                    b.Property<Guid>("UniversityID");

                    b.Property<Guid>("UserID");

                    b.Property<Guid>("UserTypeID");

                    b.HasKey("ID");

                    b.HasIndex("GenderID");

                    b.HasIndex("NationalityID");

                    b.HasIndex("UniversityID");

                    b.HasIndex("UserTypeID");

                    b.ToTable("UserAttends");
                });

            modelBuilder.Entity("EMS.Entity.UserImageEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActionDate");

                    b.Property<string>("ImgPath")
                        .HasMaxLength(900);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LatestUpdate");

                    b.Property<long>("LatestUpdateUserID");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.ToTable("UserImages");
                });

            modelBuilder.Entity("EMS.Entity.UserTypeEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActionDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LatestUpdate");

                    b.Property<long>("LatestUpdateUserID");

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("EMS.Entity.EventAttendanceEntity", b =>
                {
                    b.HasOne("EMS.Entity.EventDetailsEntity", "EventDetails")
                        .WithMany("EventAttendances")
                        .HasForeignKey("EventDetailsID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Entity.UserAttendEntity", "UserAttend")
                        .WithMany("EventAttendances")
                        .HasForeignKey("UserAttendID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Entity.EventDetailsEntity", b =>
                {
                    b.HasOne("EMS.Entity.EventCategoryEntity", "EventCategory")
                        .WithMany("EventDetails")
                        .HasForeignKey("EventCategoryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Entity.EventStatusEntity", "EventStatus")
                        .WithMany("EventDetails")
                        .HasForeignKey("EventStatusID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Entity.EventVenueEntity", "EventVenue")
                        .WithMany("EventDetails")
                        .HasForeignKey("EventVenueID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Entity.OrganizerEntity", "Organizer")
                        .WithMany("EventDetails")
                        .HasForeignKey("OrganizerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Entity.UserAdminEntity", b =>
                {
                    b.HasOne("EMS.Entity.UserImageEntity", "UsrerImage")
                        .WithMany("UserAdmins")
                        .HasForeignKey("ImgPathID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Entity.JobEntity", "Job")
                        .WithMany("UserAdmins")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Entity.UserAttendEntity", b =>
                {
                    b.HasOne("EMS.Entity.GenderEntity", "Gender")
                        .WithMany("UserAttends")
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Entity.NationalityEntity", "Nationality")
                        .WithMany("UserAttends")
                        .HasForeignKey("NationalityID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Entity.UniversityEntity", "University")
                        .WithMany("UserAttends")
                        .HasForeignKey("UniversityID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Entity.UserTypeEntity", "UserType")
                        .WithMany("UserAttends")
                        .HasForeignKey("UserTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
